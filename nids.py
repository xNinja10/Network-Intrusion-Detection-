{"cells":[{"cell_type":"code","source":"#!/usr/bin/env python3\n\nimport argparse\nimport sys\nfrom scapy.all import sniff, TCP, IP, Raw\nfrom datetime import datetime\nimport logging\n\n# --- Configuration ---\n# Configure logging to file and console\nLOG_FILE = \"nids_alerts.log\"\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n    handlers=[\n        logging.FileHandler(LOG_FILE),\n        logging.StreamHandler(sys.stdout)\n    ]\n)\n\n# --- Threat Signatures ---\n# A simple dictionary of signatures to detect.\n# In a real-world scenario, these would be more complex and loaded from a file.\nTHREAT_SIGNATURES = {\n    # Rule Name: (Layer, Field, Signature Value)\n    \"Potential SQL Injection Attempt\": (Raw, \"load\", b\"1' OR '1'='1'\"),\n    \"Potential XSS Attempt\": (Raw, \"load\", b\"<script>\"),\n    \"Nmap Xmas Scan\": (TCP, \"flags\", \"FPU\"),  # FIN, PSH, URG flags set\n    \"Nmap Null Scan\": (TCP, \"flags\", \"\"),      # No flags set\n    \"Nikto User-Agent\": (Raw, \"load\", b\"Nikto\"),\n    \"Shellshock Exploit Attempt\": (Raw, \"load\", b\"() { :;};\"),\n    \"Suspicious Dir Traversal\": (Raw, \"load\", b\"../../..\"),\n}\n\n# --- Detection Engine ---\ndef packet_analyzer(packet):\n    \"\"\"\n    Analyzes each packet against a set of predefined threat signatures.\n    \"\"\"\n    # Check for IP layer\n    if packet.haslayer(IP):\n        ip_src = packet[IP].src\n        ip_dst = packet[IP].dst\n\n        # Check for TCP layer for flag-based scans\n        if packet.haslayer(TCP):\n            tcp_sport = packet[TCP].sport\n            tcp_dport = packet[TCP].dport\n            tcp_flags = packet[TCP].flags\n\n            for name, (layer, field, sig) in THREAT_SIGNATURES.items():\n                if layer == TCP and field == \"flags\":\n                    if tcp_flags == sig:\n                        log_alert(name, ip_src, ip_dst, f\"TCP Flags: {tcp_flags}\", packet)\n\n        # Check for Raw layer (payload) for payload-based signatures\n        if packet.haslayer(Raw):\n            payload = packet[Raw].load\n            for name, (layer, field, sig) in THREAT_SIGNATURES.items():\n                if layer == Raw and field == \"load\":\n                    if sig in payload:\n                        # Try to decode for cleaner logging, otherwise show raw bytes\n                        try:\n                            decoded_payload = payload.decode('utf-8', 'ignore')\n                        except Exception:\n                            decoded_payload = str(payload)\n                        log_alert(name, ip_src, ip_dst, f\"Payload snippet: {decoded_payload[:100]}\", packet)\n\n\n# --- Alerting Module ---\ndef log_alert(rule_name, src_ip, dst_ip, details, packet):\n    \"\"\"\n    Logs a detected threat to the console and a log file.\n    \"\"\"\n    message = (\n        f\"ALERT! Threat Detected: '{rule_name}' | \"\n        f\"Source: {src_ip} -> Destination: {dst_ip} | \"\n        f\"Details: {details}\"\n    )\n    logging.warning(message)\n    # You could add more actions here, like sending an email or blocking an IP.\n\n\n# --- Main Sniffer Function ---\ndef start_sniffer(interface):\n    \"\"\"\n    Starts the packet sniffer on the specified network interface.\n    \"\"\"\n    if not interface:\n        logging.error(\"No network interface specified. Use -i <interface>.\")\n        sys.exit(1)\n\n    try:\n        logging.info(f\"Starting Network Intrusion Detection System on interface '{interface}'...\")\n        logging.info(f\"Alerts will be logged to '{LOG_FILE}'.\")\n        logging.info(\"Press Ctrl+C to stop.\")\n        # The 'prn' argument specifies the callback function to be executed for each packet\n        sniff(iface=interface, prn=packet_analyzer, store=0)\n    except PermissionError:\n        logging.error(\"Permission denied. You need to run this script as root (or with sudo).\")\n        sys.exit(1)\n    except OSError as e:\n        logging.error(f\"Error starting sniffer on interface '{interface}': {e}\")\n        logging.error(\"Please make sure the interface exists and is up. You can check with 'ifconfig' or 'ip a'.\")\n        sys.exit(1)\n    except Exception as e:\n        logging.error(f\"An unexpected error occurred: {e}\")\n        sys.exit(1)\n\n\n# --- Entry Point ---\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(\n        description=\"A simple Python-based Network Intrusion Detection System (NIDS).\",\n        epilog=\"Example: sudo python nids.py -i eth0\"\n    )\n    parser.add_argument(\n        \"-i\", \"--interface\",\n        help=\"Network interface to sniff on (e.g., eth0, wlan0, en0).\"\n    )\n    args = parser.parse_args()\n\n    try:\n        start_sniffer(args.interface)\n    except KeyboardInterrupt:\n        logging.info(\"\\nSniffer stopped by user. Exiting.\")\n        sys.exit(0)","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}